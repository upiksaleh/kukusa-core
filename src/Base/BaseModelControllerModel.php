<?php
/**
 * Kukusa CMS
 *
 * Copyright (c) 2020, CodeUP.
 * @author  Upik Saleh <upik@codeup.id>
 */

namespace Kukusa\Base;

use Kukusa;
use yii\db\BaseActiveRecord;

/**
 * Class BaseModelControllerModel
 * @package Kukusa\Base
 */
abstract class BaseModelControllerModel extends BaseActiveRecord
{
    use BaseModelRepoControllerTrait;
    use ModelTrait;
    public function init()
    {
        parent::init();
        $this->init_base();
    }

    /**
     * handle find model
     * @param $params
     * @return null|static
     */
    abstract protected function onFindModelOne($params);

    public static function getDb()
    {
        return \Kukusa::$app->getDb();
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function insert($runValidation = true, $attributes = null)
    {
        if ($runValidation && !$this->validate($attributes)) {
            Kukusa::info('Model not inserted due to validation error.', __METHOD__);
            return false;
        }

        return $this->insertInternal($attributes);

    }
    public static function populateRecord($record, $row){
        print_r($record);
    }
    protected function insertInternal($attributes = null)
    {
        $a = Kukusa\Models\SysUser::findOne(1);
        $a = self::findOne(1);
        echo $a->getIsNewRecord();exit;
        if (!$this->beforeSave(true)) {
            return false;
        }

        $role = Kukusa::$app->authManager->createRole($this->name);
        Kukusa::$app->authManager->add($role);
        $this->name = '1212';

        $values = $this->getDirtyAttributes();
//        if (($primaryKeys = static::getDb()->schema->insert(static::tableName(), $values)) === false) {
//            return false;
//        }
//        foreach ($primaryKeys as $name => $value) {
//            $id = static::getTableSchema()->columns[$name]->phpTypecast($value);
//            $this->setAttribute($name, $id);
//            $values[$name] = $id;
//        }
//
        $changedAttributes = array_fill_keys(array_keys($values), null);
        print_r($values);exit;
//        $this->setOldAttributes($values);
        $this->afterSave(true, $changedAttributes);

        return true;
    }
}